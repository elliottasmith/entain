// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	racing "github.com/elliottasmith/entain/racing/proto/racing"
	mock "github.com/stretchr/testify/mock"
)

// RacesRepo is an autogenerated mock type for the RacesRepo type
type RacesRepo struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *RacesRepo) Get(id *int64) (*racing.Race, error) {
	ret := _m.Called(id)

	var r0 *racing.Race
	if rf, ok := ret.Get(0).(func(*int64) *racing.Race); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*racing.Race)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *RacesRepo) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: filter, order
func (_m *RacesRepo) List(filter *racing.ListRacesRequestFilter, order *racing.ListRacesRequestOrder) ([]*racing.Race, error) {
	ret := _m.Called(filter, order)

	var r0 []*racing.Race
	if rf, ok := ret.Get(0).(func(*racing.ListRacesRequestFilter, *racing.ListRacesRequestOrder) []*racing.Race); ok {
		r0 = rf(filter, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*racing.Race)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*racing.ListRacesRequestFilter, *racing.ListRacesRequestOrder) error); ok {
		r1 = rf(filter, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRacesRepo creates a new instance of RacesRepo. It also registers a cleanup function to assert the mocks expectations.
func NewRacesRepo(t testing.TB) *RacesRepo {
	mock := &RacesRepo{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
