// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	sports "github.com/elliottasmith/entain/sports/proto/sports"
	mock "github.com/stretchr/testify/mock"
)

// EventsRepo is an autogenerated mock type for the EventsRepo type
type EventsRepo struct {
	mock.Mock
}

// Init provides a mock function with given fields:
func (_m *EventsRepo) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: filter, order
func (_m *EventsRepo) List(filter *sports.ListEventsRequestFilter, order *sports.ListEventsRequestOrder) ([]*sports.Event, error) {
	ret := _m.Called(filter, order)

	var r0 []*sports.Event
	if rf, ok := ret.Get(0).(func(*sports.ListEventsRequestFilter, *sports.ListEventsRequestOrder) []*sports.Event); ok {
		r0 = rf(filter, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sports.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sports.ListEventsRequestFilter, *sports.ListEventsRequestOrder) error); ok {
		r1 = rf(filter, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventsRepo creates a new instance of EventsRepo. It also registers a cleanup function to assert the mocks expectations.
func NewEventsRepo(t testing.TB) *EventsRepo {
	mock := &EventsRepo{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
